name: Deploy to AWS
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Deploy to {0}', github.event.inputs.environment) || (github.ref == 'refs/heads/main' && 'Deploy to Test-UAT-Prod' || 'Build & Unit Test') }}

permissions:
  packages: write
  contents: write

on:
  push:
    paths-ignore:
      [
        "**/README.md",
        ".github/workflows/increment-version.yml",
        "version",
        "python/**",
      ]
  workflow_dispatch:
    inputs:
      environment:
        description: Deploy to which environnment
        type: choice
        required: true
        options:
          - dev
          - test
          - uat
          - prod
      run_performance_tests:
        required: false
        default: false
        type: boolean
        description: Run performance tests
      run_e2e_tests_assessment:
        required: false
        default: false
        type: boolean
        description: Run e2e tests (assessment)
      run_e2e_tests_application:
        required: false
        default: true
        type: boolean
        description: Run e2e tests (application)
  workflow_call:
    inputs:
      runner-cache-ref:
        description: cache ref for the runner app
        required: true
        type: string
      designer-cache-ref:
        description: cache ref for the designer app
        required: true
        type: string

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: "funding-service-design-form-runner-adapter"
  IMAGE_NAME_DESIGNER: "funding-service-design-form-designer-adapter"
  IMAGE_REPO_PATH: "ghcr.io/${{github.repository_owner}}"

jobs:
  setup:
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/determine-jobs.yml@main
    with:
      environment: ${{ inputs.environment }}

  e2e-test:
    needs: [ setup ]
    runs-on: ubuntu-latest
    name: run e2e
    outputs:
      tag: ${{ steps.hashFile.outputs.tag }}
      hash: ${{ steps.hashFile.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Get into the directory
        id: change-dir
        run: yarn config set enableImmutableInstalls false

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-e2e-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-e2e
            ${{ runner.os }}-yarn  

      - name: Setup e2e dependencies
        run: |
          echo "--  Git submodule initialize into local  --"
          git submodule update --init
          echo "--  Pulling git submodules into local  --"
          git pull --recurse-submodules
          echo "--  Installing digital-form-builder-adapter locally  --"
          node update-package.js
          yarn install
          echo "--  Install e2e dependencies  --"
          yarn e2e-test install
          echo "--  Building digital-form-builder locally  --"
          cd digital-form-builder
          yarn

      - name: Start containers
        run: docker compose -f docker-compose.e2e.yml up -d

      - name: Check container status
        run: docker ps

      - name: Create Folders
        run: mkdir -p ./e2e-test/cypress/screenshots/logs

      - name: Get Logs from Localstack
        run: docker logs localstack > ./e2e-test/cypress/screenshots/logs/localstack-pre.log

      - name: Get Logs from Runner
        run: docker logs runner > ./e2e-test/cypress/screenshots/logs/runner-pre.log

      - name: Check logs availability
        run: ls ./e2e-test/cypress/screenshots/logs

      - name: Create S3 bucket
        run: docker exec localstack /bin/sh -c "awslocal s3api create-bucket --bucket fsd-bucket --create-bucket-configuration LocationConstraint=eu-west-2 --region eu-west-2"

      - name: Create S3 cors
        run: |
          docker exec localstack /bin/sh -c "awslocal s3api put-bucket-cors --bucket fsd-bucket --cors-configuration '{\"CORSRules\": [{\"AllowedOrigins\": [\"*\"],\"AllowedMethods\": [\"GET\", \"PUT\", \"POST\", \"DELETE\", \"HEAD\"],\"AllowedHeaders\": [\"*\"]}]}'"

      - name: Run e2e tests
        run: yarn e2e-test cypress run
        continue-on-error: true

      - name: Get Logs from localstack
        run: docker logs localstack > ./e2e-test/cypress/screenshots/logs/localstack.log

      - name: Get Logs from runner
        run: docker logs runner > ./e2e-test/cypress/screenshots/logs/runner.log

      - name: Check logs availability
        run: ls ./e2e-test/cypress/screenshots/logs

      - name: Upload E2E Test Report Application (temp)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report-application
          path: ./e2e-test/cypress/screenshots/logs
          retention-days: 5

      - name: Upload E2E Test Report Application
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report-application
          path: ./e2e-test/cypress/screenshots
          retention-days: 5


