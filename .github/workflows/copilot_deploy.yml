name: Deploy to AWS
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Deploy to {0}', github.event.inputs.environment) || (github.ref == 'refs/heads/main' && 'Deploy to Test-UAT-Prod' || 'Build & Unit Test') }}

permissions:
  packages: write
  contents: write

on:
  push:
    paths-ignore:
      [
        "**/README.md",
        ".github/workflows/increment-version.yml",
        "version",
        "python/**",
      ]
  workflow_dispatch:
    inputs:
      environment:
        description: Deploy to which environnment
        type: choice
        required: true
        options:
          - dev
          - test
          - uat
          - prod
      run_performance_tests:
        required: false
        default: false
        type: boolean
        description: Run performance tests
      run_e2e_tests_assessment:
        required: false
        default: false
        type: boolean
        description: Run e2e tests (assessment)
      run_e2e_tests_application:
        required: false
        default: true
        type: boolean
        description: Run e2e tests (application)
  workflow_call:
    inputs:
      runner-cache-ref:
        description: cache ref for the runner app
        required: true
        type: string
      designer-cache-ref:
        description: cache ref for the designer app
        required: true
        type: string

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: "funding-service-design-form-runner-adapter"
  IMAGE_NAME_DESIGNER: "funding-service-design-form-designer-adapter"
  IMAGE_REPO_PATH: "ghcr.io/${{github.repository_owner}}"

jobs:
  setup:
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/determine-jobs.yml@main
    with:
      environment: ${{ inputs.environment }}

  docker-runner-build:
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Remove submodule dockerignore / yarn.lock (if present)
        if: ${{ hashFiles('digital-form-builder/.dockerignore') != '' || hashFiles('digital-form-builder/yarn.lock') != '' }}
        run: |
          rm -f digital-form-builder/.dockerignore digital-form-builder/yarn.lock

      - name: "Set version in env"
        id: set-version
        run: |
          source version
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{env.IMAGE_REPO_PATH}}/${{env.IMAGE_NAME}}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{env.VERSION}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=latest
            type=ref,event=branch

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx property
        run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Cache stats (Buildx)
        run: docker buildx du --verbose || true

      - name: Build and push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.metadata.outputs.tags}}
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          file: ./runner/Dockerfile
          build-args: |
            INSTALL_NODEMON=false
            LAST_TAG='${{env.VERSION}}'
          cache-from: type=gha,scope=runner
          cache-to: type=gha,mode=max,scope=runner

  docker-designer-build:
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Remove submodule dockerignore / yarn.lock (if present)
        if: ${{ hashFiles('digital-form-builder/.dockerignore') != '' || hashFiles('digital-form-builder/yarn.lock') != '' }}
        run: |
          rm -f digital-form-builder/.dockerignore digital-form-builder/yarn.lock

      - name: "Set version in env"
        id: set-version
        run: |
          source version
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{env.IMAGE_REPO_PATH}}/${{env.IMAGE_NAME_DESIGNER}}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{env.VERSION}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=latest
            type=ref,event=branch

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env for designer workspace
        run: |
          touch ./designer/.env
          echo LAST_TAG_GH=designer >> ./designer/.env
          echo LAST_COMMIT_GH=designer >> ./designer/.env
          cat ./designer/.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Cache stats (Buildx)
        run: docker buildx du --verbose || true

      - name: Build and push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.metadata.outputs.tags}}
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          file: ./designer/Dockerfile
          build-args: |
            LAST_TAG='${{env.VERSION}}'
          cache-from: type=gha,scope=designer
          cache-to: type=gha,mode=max,scope=designer

  e2e-test:
    needs: [ setup, docker-runner-build, docker-designer-build ]
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        containers: [ 0, 1, 2, 3, 4 ]
    name: run e2e
    outputs:
      tag: ${{ steps.hashFile.outputs.tag }}
      hash: ${{ steps.hashFile.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Use Yarn 3.2.2 via Corepack
        run: |
          corepack enable
          corepack prepare yarn@3.2.2 --activate
          yarn -v

      - name: Ensure workspace-tools plugin
        run: yarn plugin import workspace-tools

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            node_modules  # Cache the installed node modules
            **/node_modules  # Include subfolders if using workspaces
          key: ${{ runner.os }}-yarn-e2e-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-e2e
            ${{ runner.os }}-yarn

      - name: Setup e2e dependencies
        run: |
          echo "--  Installing dependencies  --"
          yarn install
          echo "--  Install e2e dependencies  --"
          yarn e2e-test install

      - name: Injecting image into docker compose e2e
        run: |
          yq -i '.services.designer.image = "ghcr.io/communitiesuk/funding-service-design-form-designer-adapter:sha-${{ github.sha }}"'  docker-compose.e2e.yml
          yq -i '.services.runner.image = "ghcr.io/communitiesuk/funding-service-design-form-runner-adapter:sha-${{ github.sha }}"'  docker-compose.e2e.yml

      - name: Start containers
        run: docker compose -f docker-compose.e2e.yml up -d

      - name: Add localstack to /etc/hosts
        run: |
            echo "127.0.0.1 localhost localstack host.docker.internal" | sudo tee -a /etc/hosts
            cat /etc/hosts

      - name: Create S3 bucket
        run: docker exec localstack /bin/sh -c "awslocal s3api create-bucket --bucket fsd-bucket --create-bucket-configuration LocationConstraint=eu-west-2 --region eu-west-2"

      - name: Create S3 cors
        run: |
          docker exec localstack /bin/sh -c "awslocal s3api put-bucket-cors --bucket fsd-bucket --cors-configuration '{\"CORSRules\": [{\"AllowedOrigins\": [\"*\"],\"AllowedMethods\": [\"GET\", \"PUT\", \"POST\", \"DELETE\", \"HEAD\"],\"AllowedHeaders\": [\"*\"]}]}'"

      - name: Run e2e tests
        id: e2e
        run: yarn e2e-test cypress run --spec $(node e2e-test/cypress-parallel.js ${{ matrix.containers }} 5) --reporter junit --reporter-options "mochaFile=./cypress/screenshots/results/test-output-[hash].xml,overwrite=false"
        continue-on-error: true

      - name: Upload E2E Test Report Application
        if: success() || failure()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: e2e-test-report-application-${{ matrix.containers }}
          path: ./e2e-test/cypress/screenshots
          retention-days: 1

      - name: Check for errors & exit the job
        run: |
          if [ "${{ steps.e2e.outcome }}" == "failure" ]; then
            echo "Test failures please fix before deploying the service"
            exit 1
          fi

  aggregate-test-results:
    name: Aggregate test results
    needs: e2e-test  # Make sure this job runs after 'e2e-test' job
    if: always() && github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download All Reports
        run: |
          for i in {0..4}; do
            gh run download --name "e2e-test-report-application-$i" --dir ./result || echo "Report $i not found"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install XML Tools
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils
      - name: Generate Test Suite Report
        run: |
          echo "Aggregating test suite results..."
          echo -e "\n+---------------------------------------------------------------------------------------------------------------------------"
          printf "| %-60s | %-19s | %-19s |\n" "File Name" "Tests Count" "Status"
          echo -e "----------------------------------------------------------------------------------------------------------------------------"
          total_tests=0
          total_features_tests=0
          failed_tests=0
          
          while read file; do
          
            file_name=$(xmllint --xpath 'string(//testsuite/@file)' "./$file" -o 2>/dev/null)
            tests_in_file=$(xmllint --xpath 'string(//*[local-name()='\''testsuite'\''][2]/@tests)' "./$file" -o 2>/dev/null)
            failures=$(xmllint --xpath 'string(//testsuite[2]/@failures)' "./$file" -o 2>/dev/null)
          
            status="Passed"
            if [ "$failures" -gt 0 ]; then
              status="Failed"
              failed_tests=$((failed_tests + 1))
            fi
          
            tests_in_file=${tests_in_file:-0}
            tests_in_file=$((tests_in_file + 0))
          
            total_tests=$((total_tests + tests_in_file))
            total_features_tests=$((total_features_tests + 1))
          
            printf "| %-60s | %-19s | %-19s |\n" "$file_name" "$tests_in_file" "$status"
          
          done < <(find "result" -name '*.xml')
          
          echo -e "----------------------------------------------------------------------------------------------------------------------------"
          echo "Total Tests: $total_tests"
          echo "Total Features: $total_features_tests"
          echo "Total Failures: $failed_tests"
          echo -e "----------------------------------------------------------------------------------------------------------------------------"
          
          if [ "$failed_tests" -gt 0 ]; then
            echo "Test failures detected. Failing the job."
            exit 1
          fi

  dev_deploy:
    needs: [ setup, docker-designer-build, docker-runner-build ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'dev') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') ) }}
    concurrency:
      group: 'fsd-adapter-dev'
      cancel-in-progress: false
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    uses: ./.github/workflows/deploy.yml
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
    with:
      environment: dev
      alert_slack_on_failure: false
      notify_slack_on_deployment: false

  post_dev_deploy_tests:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy ]
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    secrets:
      FSD_GH_APP_ID: ${{ secrets.FSD_GH_APP_ID }}
      FSD_GH_APP_KEY: ${{ secrets.FSD_GH_APP_KEY }}
      FS_BASIC_AUTH_USERNAME: ${{ secrets.FS_BASIC_AUTH_USERNAME }}
      FS_BASIC_AUTH_PASSWORD: ${{ secrets.FS_BASIC_AUTH_PASSWORD }}
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/post-deploy.yml@main
    with:
      run_performance_tests: ${{ inputs.run_performance_tests || true }}
      run_e2e_tests_assessment: ${{ inputs.run_e2e_tests_assessment || false }}
      run_e2e_tests_application: ${{ inputs.run_e2e_tests_application || false }}
      run_static_security_python: false
      run_zap_scan: true
      app_name: forms
      environment: dev
      notify_slack: false

  test_deploy:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, post_dev_deploy_tests ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'test') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') ) }}
    concurrency:
      group: 'fsd-adapter-test'
      cancel-in-progress: false
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    uses: ./.github/workflows/deploy.yml
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.SLACK_NOTIFICATION_CHANNEL_ID }}
    with:
      environment: test
      alert_slack_on_failure: true
      notify_slack_on_deployment: false

  post_test_deploy_tests:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, test_deploy ]
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'test') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') )  }}

    secrets:
      FSD_GH_APP_ID: ${{ secrets.FSD_GH_APP_ID }}
      FSD_GH_APP_KEY: ${{ secrets.FSD_GH_APP_KEY }}
      FS_BASIC_AUTH_USERNAME: ${{ secrets.FS_BASIC_AUTH_USERNAME }}
      FS_BASIC_AUTH_PASSWORD: ${{ secrets.FS_BASIC_AUTH_PASSWORD }}
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.SLACK_NOTIFICATION_CHANNEL_ID }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/post-deploy.yml@main
    with:
      run_performance_tests: ${{ inputs.run_performance_tests || true }}
      run_e2e_tests_assessment: ${{ inputs.run_e2e_tests_assessment || false }}
      run_e2e_tests_application: ${{ inputs.run_e2e_tests_application || true }}
      run_static_security_python: false
      run_zap_scan: true
      app_name: forms
      environment: test
      notify_slack: true

  uat_deploy:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, test_deploy, post_test_deploy_tests ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'uat') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') ) }}
    concurrency:
      group: 'fsd-adapter-uat'
      cancel-in-progress: false
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    uses: ./.github/workflows/deploy.yml
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.SLACK_NOTIFICATION_CHANNEL_ID }}
    with:
      environment: uat
      alert_slack_on_failure: true
      notify_slack_on_deployment: false

  post_uat_deploy_tests:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, test_deploy, uat_deploy ]
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    if: ${{ always()  && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'uat') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') )  }}
    secrets:
      FSD_GH_APP_ID: ${{ secrets.FSD_GH_APP_ID }}
      FSD_GH_APP_KEY: ${{ secrets.FSD_GH_APP_KEY }}
      FS_BASIC_AUTH_USERNAME: ${{ secrets.FS_BASIC_AUTH_USERNAME }}
      FS_BASIC_AUTH_PASSWORD: ${{ secrets.FS_BASIC_AUTH_PASSWORD }}
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.SLACK_NOTIFICATION_CHANNEL_ID }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/post-deploy.yml@main
    with:
      run_performance_tests: ${{ inputs.run_performance_tests || true }}
      run_e2e_tests_assessment: ${{ inputs.run_e2e_tests_assessment || false }}
      run_e2e_tests_application: ${{ inputs.run_e2e_tests_application || true }}
      run_static_security_python: false
      run_zap_scan: true
      app_name: forms
      environment: uat
      notify_slack: true

  prod_deploy:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, test_deploy, uat_deploy, post_uat_deploy_tests ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'prod') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') ) }}
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/standard-deploy.yml@main
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.SLACK_NOTIFICATION_CHANNEL_ID }}
      SLACK_DEPLOYMENTS_CHANNEL_ID: ${{ secrets.SLACK_DEPLOYMENTS_CHANNEL_ID }}
    with:
      environment: prod
      app_name: form-runner-adapter
      run_db_migrations: false
      image_location: ghcr.io/communitiesuk/funding-service-design-form-runner-adapter:sha-${{ github.sha }}
      notify_slack: true
      notify_slack_on_deployment: true

