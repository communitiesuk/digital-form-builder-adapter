name: Deploy to AWS
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Deploy to {0}', github.event.inputs.environment) || (github.ref == 'refs/heads/main' && 'Deploy to Test-UAT-Prod' || 'Build & Unit Test') }}

permissions:
  packages: write
  contents: write

on:
  push:
    paths-ignore:
      [
        "**/README.md",
        ".github/workflows/increment-version.yml",
        "version",
        "python/**",
      ]
  workflow_dispatch:
    inputs:
      environment:
        description: Deploy to which environnment
        type: choice
        required: true
        options:
          - dev
          - test
          - uat
          - prod
      run_performance_tests:
        required: false
        default: false
        type: boolean
        description: Run performance tests
      run_e2e_tests_assessment:
        required: false
        default: false
        type: boolean
        description: Run e2e tests (assessment)
      run_e2e_tests_application:
        required: false
        default: true
        type: boolean
        description: Run e2e tests (application)
  workflow_call:
    inputs:
      runner-cache-ref:
        description: cache ref for the runner app
        required: true
        type: string
      designer-cache-ref:
        description: cache ref for the designer app
        required: true
        type: string

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: "funding-service-design-form-runner-adapter"
  IMAGE_NAME_DESIGNER: "funding-service-design-form-designer-adapter"
  IMAGE_REPO_PATH: "ghcr.io/${{github.repository_owner}}"

jobs:
  setup:
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/determine-jobs.yml@main
    with:
      environment: ${{ inputs.environment }}

  docker-runner-build:
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: "Set version in env"
        id: set-version
        run: |
          source version
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{env.IMAGE_REPO_PATH}}/${{env.IMAGE_NAME}}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{env.VERSION}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=latest
            type=ref,event=branch

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env for runner workspace
        run: |
          touch ./runner/.env
          echo LAST_TAG_GH=runner >> ./runner/.env
          echo LAST_COMMIT_GH=runner >> ./runner/.env
          cat ./runner/.env

      - name: Set up Docker Buildx property
        run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.buildx/cache
          key: ${{ runner.os }}-buildx-runner-${{ hashFiles('./runner/Dockerfile') }}-${{ hashFiles('./runner/package.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-runner-${{ hashFiles('./runner/Dockerfile') }}-${{ hashFiles('./runner/package.json') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.metadata.outputs.tags}}
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          file: ./runner/Dockerfile
          build-args: |
            LAST_TAG='${{env.VERSION}}'
            LAST_COMMIT='${{ github.sha }}'
          cache-from: type=gha,scope=buildx
          cache-to: type=gha,mode=max,scope=buildx

  docker-designer-build:
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: "Set version in env"
        id: set-version
        run: |
          source version
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{env.IMAGE_REPO_PATH}}/${{env.IMAGE_NAME_DESIGNER}}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{env.VERSION}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=latest
            type=ref,event=branch

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env for designer workspace
        run: |
          touch ./designer/.env
          echo LAST_TAG_GH=designer >> ./designer/.env
          echo LAST_COMMIT_GH=designer >> ./designer/.env
          cat ./designer/.env

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.buildx/cache
          key: ${{ runner.os }}-buildx-runner-${{ hashFiles('./designer/Dockerfile') }}-${{ hashFiles('./designer/package.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-designer-${{ hashFiles('./designer/Dockerfile') }}-${{ hashFiles('./designer/package.json') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.metadata.outputs.tags}}
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          file: ./designer/Dockerfile
          build-args: |
            LAST_TAG='${{env.VERSION}}'
            LAST_COMMIT='${{ github.sha }}'
          cache-from: type=gha,scope=buildx
          cache-to: type=gha,mode=max,scope=buildx

  e2e-test:
    needs: [ setup, docker-runner-build, docker-designer-build ]
    runs-on: ubuntu-latest
    name: run e2e
    outputs:
      tag: ${{ steps.hashFile.outputs.tag }}
      hash: ${{ steps.hashFile.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Get into the directory
        id: change-dir
        run: yarn config set enableImmutableInstalls false

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            node_modules  # Cache the installed node modules
            **/node_modules  # Include subfolders if using workspaces
          key: ${{ runner.os }}-yarn-e2e-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-e2e
            ${{ runner.os }}-yarn  

      - name: Setup e2e dependencies
        run: |
          echo "--  Git submodule initialize into local  --"
          git submodule update --init
          echo "--  Pulling git submodules into local  --"
          git pull --recurse-submodules
          echo "--  Installing digital-form-builder-adapter locally  --"
          node update-package.js
          yarn install
          echo "--  Install e2e dependencies  --"
          yarn e2e-test install
          echo "--  Building digital-form-builder locally  --"
          cd digital-form-builder
          yarn

      - name: Injecting image into docker compose e2e
        run: |
          yq -i '.services.designer.image = "ghcr.io/communitiesuk/funding-service-design-form-designer-adapter:sha-${{ github.sha }}"'  docker-compose.e2e.yml
          yq -i '.services.runner.image = "ghcr.io/communitiesuk/funding-service-design-form-runner-adapter:sha-${{ github.sha }}"'  docker-compose.e2e.yml

      - name: Start containers
        run: docker compose -f docker-compose.e2e.yml up -d

      - name: Create S3 bucket
        run: docker exec localstack /bin/sh -c "awslocal s3api create-bucket --bucket fsd-bucket --create-bucket-configuration LocationConstraint=eu-west-2 --region eu-west-2"

      - name: Create S3 cors
        run: |
          docker exec localstack /bin/sh -c "awslocal s3api put-bucket-cors --bucket fsd-bucket --cors-configuration '{\"CORSRules\": [{\"AllowedOrigins\": [\"*\"],\"AllowedMethods\": [\"GET\", \"PUT\", \"POST\", \"DELETE\", \"HEAD\"],\"AllowedHeaders\": [\"*\"]}]}'"

      - name: Run e2e tests
        id: e2e
        run: yarn e2e-test cypress run
        continue-on-error: true

      - name: Create Folders
        run: mkdir -p ./e2e-test/cypress/screenshots/logs

      - name: Get Logs from localstack
        run: docker logs localstack > ./e2e-test/cypress/screenshots/logs/localstack.log

      - name: Get Logs from runner
        run: docker logs runner > ./e2e-test/cypress/screenshots/logs/runner.log

      - name: Get all the uploaded files in the bucket
        run: docker exec localstack /bin/sh -c "awslocal s3api list-objects --bucket fsd-bucket"

      - name: Upload E2E Test Report Application
        if: success() || failure()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: e2e-test-report-application
          path: ./e2e-test/cypress/screenshots
          retention-days: 5

      - name: Check for errors & exit the job
        run: |
          if [ "${{ steps.e2e.outcome }}" == "failure" ]; then
            echo "Test failures please fix before deploying the service"
            exit 1
          fi

  dev_deploy:
    strategy:
      matrix:
        include:
          - deployment: fsd-form-runner-adapter
            command: svc
            appname: "form-runner-adapter"
          - deployment: fsd-form-designer-adapter
            command: svc
            appname: "form-designer-adapter"
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    needs: [ setup, docker-designer-build, docker-runner-build ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'dev') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') ) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Setup Copilot
        uses: communitiesuk/funding-service-design-workflows/.github/actions/copilot_setup@main
        with:
          environment: ${{ inputs.environment || 'dev' }}
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}

      - name: Inject env specific values into manifest
        run: |
          yq -i '.variables.GITHUB_SHA = "${{ github.sha }}"'  copilot/${{ matrix.deployment }}/manifest.yml
          yq -i '.image.location = "ghcr.io/communitiesuk/funding-service-design-${{ matrix.appname }}:sha-${{ github.sha }}"'  copilot/${{ matrix.deployment }}/manifest.yml

      - name: Copilot deploy ${{ matrix.deployment }}
        run: |
          copilot ${{ matrix.command }} deploy --name ${{ matrix.deployment }}

  post_dev_deploy_tests:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy ]
    secrets:
      FSD_GH_APP_ID: ${{ secrets.FSD_GH_APP_ID }}
      FSD_GH_APP_KEY: ${{ secrets.FSD_GH_APP_KEY }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/post-deploy.yml@main
    with:
      run_performance_tests: ${{ inputs.run_performance_tests || true }}
      run_e2e_tests_assessment: ${{ inputs.run_e2e_tests_assessment || false }}
      run_e2e_tests_application: ${{ inputs.run_e2e_tests_application || false }}
      run_static_security_python: false
      run_zap_scan: true
      app_name: forms
      environment: dev

  test_deploy:
    strategy:
      matrix:
        include:
          - deployment: fsd-form-runner-adapter
            command: svc
            appname: "form-runner-adapter"
          - deployment: fsd-form-designer-adapter
            command: svc
            appname: "form-designer-adapter"
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, post_dev_deploy_tests ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'test') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') ) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'test' }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Setup Copilot
        uses: communitiesuk/funding-service-design-workflows/.github/actions/copilot_setup@main
        with:
          environment: ${{ inputs.environment || 'test' }}
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}

      - name: Inject env specific values into manifest
        run: |
          yq -i '.variables.GITHUB_SHA = "${{ github.sha }}"'  copilot/${{ matrix.deployment }}/manifest.yml
          yq -i '.image.location = "ghcr.io/communitiesuk/funding-service-design-${{ matrix.appname }}:sha-${{ github.sha }}"'  copilot/${{ matrix.deployment }}/manifest.yml

      - name: Copilot deploy ${{ matrix.deployment }}
        run: |
          copilot ${{ matrix.command }} deploy --name ${{ matrix.deployment }}

  post_test_deploy_tests:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, test_deploy ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'test') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') )  }}

    secrets:
      FSD_GH_APP_ID: ${{ secrets.FSD_GH_APP_ID }}
      FSD_GH_APP_KEY: ${{ secrets.FSD_GH_APP_KEY }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/post-deploy.yml@main
    with:
      run_performance_tests: ${{ inputs.run_performance_tests || true }}
      run_e2e_tests_assessment: ${{ inputs.run_e2e_tests_assessment || false }}
      run_e2e_tests_application: ${{ inputs.run_e2e_tests_application || true }}
      run_static_security_python: false
      run_zap_scan: true
      app_name: forms
      environment: test

  uat_deploy:
    strategy:
      matrix:
        include:
          - deployment: fsd-form-runner-adapter
            command: svc
            appname: "form-runner-adapter"
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, test_deploy, post_test_deploy_tests ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'uat') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') ) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'uat' }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Setup Copilot
        uses: communitiesuk/funding-service-design-workflows/.github/actions/copilot_setup@main
        with:
          environment: ${{ inputs.environment || 'uat' }}
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}

      - name: Inject env specific values into manifest
        run: |
          yq -i '.variables.GITHUB_SHA = "${{ github.sha }}"'  copilot/${{ matrix.deployment }}/manifest.yml
          yq -i '.image.location = "ghcr.io/communitiesuk/funding-service-design-${{ matrix.appname }}:sha-${{ github.sha }}"'  copilot/${{ matrix.deployment }}/manifest.yml

      - name: Copilot deploy ${{ matrix.deployment }}
        run: |
          copilot ${{ matrix.command }} deploy --name ${{ matrix.deployment }}

  post_uat_deploy_tests:
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, test_deploy, uat_deploy ]
    if: ${{ always()  && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'uat') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') )  }}
    secrets:
      FSD_GH_APP_ID: ${{ secrets.FSD_GH_APP_ID }}
      FSD_GH_APP_KEY: ${{ secrets.FSD_GH_APP_KEY }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/post-deploy.yml@main
    with:
      run_performance_tests: ${{ inputs.run_performance_tests || true }}
      run_e2e_tests_assessment: ${{ inputs.run_e2e_tests_assessment || false }}
      run_e2e_tests_application: ${{ inputs.run_e2e_tests_application || true }}
      run_static_security_python: false
      run_zap_scan: true
      app_name: forms
      environment: uat

  prod_deploy:
    strategy:
      matrix:
        include:
          - deployment: fsd-form-runner-adapter
            command: svc
            appname: "form-runner-adapter"
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    needs: [ setup, docker-designer-build, docker-runner-build, dev_deploy, test_deploy, uat_deploy, post_uat_deploy_tests ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'prod') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') ) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'uat' }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Setup Copilot
        uses: communitiesuk/funding-service-design-workflows/.github/actions/copilot_setup@main
        with:
          environment: ${{ inputs.environment || 'uat' }}
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}

      - name: Inject env specific values into manifest
        run: |
          yq -i '.variables.GITHUB_SHA = "${{ github.sha }}"'  copilot/${{ matrix.deployment }}/manifest.yml
          yq -i '.image.location = "ghcr.io/communitiesuk/funding-service-design-${{ matrix.appname }}:sha-${{ github.sha }}"'  copilot/${{ matrix.deployment }}/manifest.yml

      - name: Copilot deploy ${{ matrix.deployment }}
        run: |
          copilot ${{ matrix.command }} deploy --name ${{ matrix.deployment }}

